Comandos:

git clone: crea una copia local del repo remoto.

git branch: crea una nueva branch, o se puede usar para mover las referencias.

git checkout: Switcheo de ramas o commits.

git init: crea e inicializa un directorio.

git remote add origin url: provee el path para el repo remoto.

git pull: actualiza

git merge branch_name: Mergea la branch actual (checkouteada, donde esté apuntando HEAD) con branch_name. El commit resultante es hijo de los commits de ambas ramas.
Las branches apuntan a commits.

git rebase: Une dos ramas al igual que merge. En este caso, el árbol de commits no se ramifica, sino que se crea un commit nuevo en la rama, y el de la otra rama "desaparece". Si agregamos el switch -i (interactivo) nos permite reordenar los commits y omitir los que queramos.

HEAD apunta al commit checkouteado (o la rama). Dettachearlo es adjuntar el HEAD a un commit en vez de a una rama.
Para referenciar commits, se usa su hash (git log), pero también se pueden usar referencias relativas.

git checkout HEAD^ <- Commit previo a HEAD
git checkout HEAD~4 <- 4 commits atrás de HEAD

Si agregamos un número a ^, le especificamos por cuál commit padre volver (en caso de commits de merge).
Ambos comandos pueden encadenarse.


git branch -f master HEAD^: mueve la rama al commit previo a HEAD. -f (force).

Deshacer cambios

git reset HEAD~1 mueve la referencia un commit atrás. El repo local queda en un estado como si el último commit no hubiera sucedido (LOCAL).

git revert _nombre del commit_ crea un commit adicional que introduce cambios de manera tal que revirtamos los cambios del último commit. Se pushea y se comparte en el repo remoto (REMOTO)

git cherry-pick _nombre de los commits_ permite copiar el trabajo de una rama a otra, seleccionando sólo los commits que queremos (similar a rebase)

Supongo que tengo que hacer cambios en un commit previo:

Uso git rebase -i para dejar al commit viejo adelante de todo, implemento los cambios con commit --amend, reacomodo y pongo a la rama en nuestro último commit. Lo podemos hacer con cherry-pick.

git tag _nombre del tag_ _nombre del commit_ permite poner tags (marcan permanentemente un commit).

git describe muestra que tan lejos estamos de un tag.

REPOS REMOTOS

Se agregan al repo local ramas remotas. Cuando las checkouteás , dettacheás HEAD, ya que no se puede hacer cambios directamente en estas branches. Entonces, no se actualiza con los commits.
Las ramas remotas tienen la siguiente convención para los nombres: NombreRepoRemoto/NombreRama. (El nombre del remoto suele ser origin).
Las ramas remotas reflejan el estado que tenía el repo remoto la última vez que "hablamos".

git fetch permite traer al repo local los cambios que no tiene del repo remoto. Trae los commits nuevos y actualiza la rama remota. PERO NO CAMBIA EL ESTADO DEL REPO O RAMAS LOCALES.

Una vez que se hizo el fetch, se pueden tratar como commits de otra rama. Entonces, podemos mergearlos con el repo local, usar cherry-pick, etc. git pull realiza un fetch y merge de los commits.

¿Qué pasa si alguien pusheó commits al remoto, pero yo hice cambios sobre una versión vieja?
Puedo fetchear el remoto, hacer un rebase para que mi commit sea el más actual, y pushear.
También podemos optar por hacer un merge (o sea, un git pull directamente ) con la rama remota, ya que de esta manera, tenemos un commit nuevo, cuyo padre es la rama remota.
git pull --rebase es un atajo para hacer un fetch y rebase (en vez de fetch y merge).

Las ramas locales "trackean" a las remotas. Cuando hacemos un git clone, se crea una rama remota (origin/master por ej) por cada rama del repo remoto. De esta manera, push y pull saben implicitamente con que ramas trabajar.
Para especificarlo manualmente, creamos una nueva rama usando una rama remota como referencia. 
git checkout -b absolutamenteNoEsMaster o/master

Crea una nueva rama llamada absolutamenteNoEsMaster y la hace trackear a o/master.

Otra forma de especificar la rama a trackear es usar la opción git branch -u. Ejecutando

git branch -u o/master foo

establecemos que la rama foo trackee a o/master.


git push puede usarse con parámetros. git push origin(remoto) master(lugar al que va a pushear/pullear) o git push origin origen:destino. También sirve para crear branchs en el remoto (poniendo un nombre en destino que no exista).
Los comandos para git fetch son iguales. Si no especifico destino, se copia a todas las ramas locales.
Si dejamos origen vacio, al hacer un push, borramos la rama destino. Se puede hacer lo mismo con fetch para crear una rama.
